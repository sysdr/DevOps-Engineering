name: 'Composite Deploy Action'
description: 'Deploy services with health checks and rollback capability'

inputs:
  environment:
    description: 'Target environment (staging/production)'
    required: true
  image-tag:
    description: 'Docker image tag to deploy'
    required: true
  aws-region:
    description: 'AWS region for deployment'
    required: true
    default: 'us-east-1'

outputs:
  deployment-url:
    description: 'URL of deployed application'
    value: ${{ steps.deploy.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[ "${{ inputs.environment }}" != "staging" && "${{ inputs.environment }}" != "production" ]]; then
          echo "Error: environment must be 'staging' or 'production'"
          exit 1
        fi

    - name: Set environment variables
      shell: bash
      run: |
        echo "DEPLOY_ENV=${{ inputs.environment }}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ inputs.image-tag }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ inputs.aws-region }}" >> $GITHUB_ENV

    - name: Pre-deployment health check
      shell: bash
      run: |
        echo "üîç Running pre-deployment health checks for ${{ inputs.environment }}"
        # Add health check logic here
        echo "‚úÖ Pre-deployment checks passed"

    - name: Deploy services
      id: deploy
      shell: bash
      run: |
        echo "üöÄ Deploying to ${{ inputs.environment }} with image tag ${{ inputs.image-tag }}"
        
        # Simulate deployment steps
        echo "üì¶ Pulling images..."
        echo "üîÑ Rolling update..."
        echo "‚ö° Updating load balancer..."
        
        # Set deployment URL based on environment
        if [[ "${{ inputs.environment }}" == "staging" ]]; then
          echo "url=https://staging.example.com" >> $GITHUB_OUTPUT
        else
          echo "url=https://app.example.com" >> $GITHUB_OUTPUT
        fi

    - name: Post-deployment verification
      shell: bash
      run: |
        echo "üîç Running post-deployment verification..."
        echo "‚úÖ All services healthy"
        echo "‚úÖ Load balancer updated"
        echo "‚úÖ Deployment completed successfully"

    - name: Cache deployment artifacts
      uses: actions/cache@v3
      with:
        path: |
          deployment-logs
          health-check-results
        key: deploy-${{ inputs.environment }}-${{ inputs.image-tag }}
        restore-keys: |
          deploy-${{ inputs.environment }}-
